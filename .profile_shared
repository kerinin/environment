# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="kerinin"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how many often would you like to wait before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git vi-mode)

source $ZSH/oh-my-zsh.sh

# Enable Esc-v to edit command line
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

# Vim-mode goodies
bindkey "^?" backward-delete-char
bindkey "^W" backward-kill-word 
bindkey "^H" backward-delete-char      # Control-h also deletes the previous char
bindkey "^U" kill-line  
KEYTIMEOUT=1

# Prevent trailing space being stripped after tab-completion
function self-insert-no-autoremove {
  LBUFFER="$LBUFFER$KEYS"
}
zle -N self-insert-no-autoremove
bindkey '|' self-insert-no-autoremove

. ~/environment/z/z.sh

command_exists () {
  type "$1" &> /dev/null ;
}

export EDITOR="vim"
if command_exists rbenv ; then
  export PATH="$HOME/.rbenv/bin:$HOME/environment/bin:/usr/local/bin:$PATH"
  eval "$(rbenv init -)"
fi

# OIB shortcuts
alias oib_jenkins='ssh -l ubuntu -L8080:localhost:8080 ubuntu@ec2-50-17-93-145.compute-1.amazonaws.com'

# Current branch
function gcb() {
git branch | grep '^\*' | cut -c3-
}

# Current Hash
function gch() {
git log -n1 --pretty=format:'%H'
}

# Github account / repo name
function gcf() {
grep url .git/config | cut -d: -f2 | sed -e 's/\.git//'
}

# Finish branch
gfb () 
{ 
  branch=`gcb`;
  git checkout master && git pull --prune;
  if [[ $1 == '--force' || -z `git branch --no-merged master | grep $branch` ]]; then
    git branch -d $branch && git push origin :$branch;
  else
    echo "Hey, man, $branch isn't merged yet!";
    git checkout $branch;
  fi
}

function gsq()
{
  start=`gch`
  base=`gcb`
  tmp=$base'_squashed'
  target=${1:-master}

  git co $target
  git co -b $tmp
  git merge --squash $base
  gca
  git br -D $base
  git br -m $tmp $base

  echo "Branch '$base' squashed onto '$target' (ref $start -> `gch`)"
}

alias gpn='git push -u origin `gcb`'
alias gpr='open "https://github.com/`gcf`/pull/new/`gcb`"'
alias gst='git status'
alias gco='git checkout'
alias gdf='git diff'
alias gca='git commit -a'
alias gpu='git pull origin'
alias gfp='git fetch --prune'

alias bi='bundle install'
alias be='bundle exec'
alias bers='time bundle exec rspec --format Fuubar'
alias bec='bundle exec cucumber'
alias ber='bundle exec rails'
if command_exists hub; then alias git=hub; if command_exists compdef; then compdef hub=git; fi; fi

# Rubinius
alias commas="sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta'"

function summation()
{
  paste -sd+ - | bc
}

function screened()
{
  ssh -t $1 screen -R
}

function find_recent()
{
  find . -type f -printf '%T@ %p\n' | sort -k 1nr | sed 's/^[^ ]* //' | head -n "${1:-10}"
}

function compact()
{
  sed '/^$/d'
}

function tabcol()
{
  column -t -s$'\t'
}

function quantiles()
{
  R --vanilla --slave -e "options(width = 400); data=scan(pipe('cat /dev/stdin')); quantile(data, seq(0,1,0.1));"
}

function ecdf()
{
  R --vanilla --slave -e "options(width = 400); data=scan(pipe('cat /dev/stdin')); ecdf(data)($1);"
}

function awktab()
{
  FS="\t" OFS="\t" awk $@
}

function sorttab()
{
  sort -t$'\t' $@
}
